/*Documentação: http://www2.cs.tum.edu/projects/cup/ */
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;

import myPackage.Action;
import myPackage.Block;
import myPackage.BlockContent;
import myPackage.Entry;
import myPackage.Parameter;
import myPackage.ParseResult;

parser code {:
    // conectar esse parser ao scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* conectar esse parser ao scanner! */
init with {:  :};
scan with {: return s.next_token(); :};

/* Terminals */
terminal BLOCK_START, BLOCK_END;           // { }
terminal EQUALS;                           // =
terminal SEMICOLON;                        // ;
terminal LPAREN, RPAREN;                   // ( )
terminal String  STRING_LITERAL;           // "..."
terminal String  BLOCK_TYPE;               // definicao_de_*
terminal String  IDENTIFICADOR_ACAO;       // Identificador de ação
terminal String  IDENTIFICADOR_CENARIO;    // Identificador de cenario
terminal String  IDENTIFICADOR_ACAO_CLICAR; // Identificador de ação clicar
terminal String  IDENTIFIER;               // Identificador válido

/* Não terminais */
non terminal Object              block;
non terminal List<Object>        blocks;
non terminal Object             block_content;
non terminal List<Object>       block_contents;
non terminal Object             entry;
non terminal Object             action_def;
non terminal List<Object>       actions;
non terminal String             parameter;
non terminal List<Parameter>    parameters;

/* Main block structure */
block ::= 
    BLOCK_TYPE:type IDENTIFIER:name BLOCK_START block_contents:contents BLOCK_END
    {: 
        RESULT = new Block(type, name, contents); 
    :}
    |
    BLOCK_TYPE:type BLOCK_START block_contents:contents BLOCK_END
    {: 
        RESULT = new Block(type, null, contents); 
    :}
;

/* Block contents can be nested blocks, entries, or actions */
block_contents ::= 
    block_contents:list block_content:content
    {: 
        list.add(content);
        RESULT = list; 
    :}
    |
    block_content:content
    {: 
        List<Object> list = new ArrayList<>();
        list.add(content);
        RESULT = list; 
    :}
;

/* Block content can be another block, an entry, or an action */
block_content ::=
    block:b
    {: RESULT = b; :}
    |
    entry:e
    {: RESULT = e; :}
    |
    action_def:a
    {: RESULT = a; :}
;

/* Simple key-value entry */
entry ::= 
    IDENTIFIER:key EQUALS STRING_LITERAL:value SEMICOLON
    {: 
        RESULT = new Entry(key, value); 
    :}
;

/* Action with optional parameters */
action_def ::=
    IDENTIFIER:name LPAREN parameters:params RPAREN SEMICOLON
    {: 
        RESULT = new Action(name, params); 
    :}
    |
    IDENTIFIER:name LPAREN RPAREN SEMICOLON
    {: 
        RESULT = new Action(name, new ArrayList<>()); 
    :}
;

/* Parameter list */
parameters ::=
    parameters:list IDENTIFIER:param
    {: 
        list.add(new Parameter(param));
        RESULT = list; 
    :}
    |
    IDENTIFIER:param
    {: 
        List<Parameter> list = new ArrayList<>();
        list.add(new Parameter(param));
        RESULT = list; 
    :}
;